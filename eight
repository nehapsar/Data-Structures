
        if('serviceWorker' in navigator){
            window.addEventListener('load', ()=> {
                navigator.serviceWorker.register('sw.js', {scope : "/"})
                .then(registration, () =>{console.log(registration)})
                .catch(err, ()=> {console.log(err)})
            })




      ///


{
    "name" : "Login Page",
    "short_name": "Login",
    "description": "This is a sample app to demonstrate login module in pwa",
    "id": "./",
    "start_url": "./",
    "scope": ".",
    "display": "standalone",
    "display_override": ["window-controls-overlay"],
    "theme_color": "#ffffff",
    "background_color": "#000000",
    "orientation": "portrait",
    "icons": [
        {
            "src": "images/icons/icon-72x72.png",
            "sizes": "72x72",
            "type": "image/png",
            "purpose": "any"
        },
        {
            "src": "images/icons/icon-96x96.png",
            "sizes": "96x96",
            "type": "image/png",
            "purpose": "any"
        },
        {
            "src": "images/icons/icon-128x128.png",
            "sizes": "128x128",
            "type": "image/png",
            "purpose": "any"
        },
        {
            "src": "images/icons/ms-icon-144x144.png",
            "sizes": "144x144",
            "type": "image/png",
            "purpose": "any"
        }
    ],
    "screenshots": [
        {
            "src": "images/narrow.png",
            "type": "image/png",
            "sizes": "500x750",
            "form_factor": "wide",
            "label": "screenshot1"
        },
        {
            "src": "images/narrow.png",
            "type": "image/png",
            "sizes": "500x750",
            "form_factor": "narrow",
            "label": "screenshot2"
        }
    ],
    "splash_pages": null
}



///let cacheName = "site-cache-v1";
let sitesToCache = [
    "/",
    "index.html"
]

self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open(cacheName)
        .then(cache, ()=>{
            return cache.addAll(sitesToCache)
        })
    )
})

self.addEventListener('activate', (event) => {
    event.waitUntil(
        caches.open(cacheName)
        .then(cache, ()=>{
            return cache.addAll(sitesToCache)
        })
    )
})

      
